{"version":3,"sources":["utils/serverInfo.js","components/AudioRecorderComponent.js","App.js","index.js"],"names":["exports","serverURL","useStyles","makeStyles","formButton","position","margin","left","right","backgroundColor","color","recordButtonIcon","fontSize","padding","whiteColored","textAlign","getWindowDimensions","window","width","innerWidth","height","innerHeight","AudioRecorder","props","classes","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","recordState","setRecordState","isRecording","setIsRecording","sampleRate","setSampleRate","bpm","setBpm","Typography","variant","className","style","IconButton","onClick","RecordState","STOP","START","state","onStop","audioData","Swal","fire","icon","title","text","input","inputPlaceholder","showCancelButton","inputValidator","value","confirmButtonColor","confirmButtonText","cancelButtonColor","cancelButtonText","customClass","preConfirm","fileName","Math","random","toString","substring","wavFile","File","blob","formData","FormData","append","fileDataString","axios","post","responseType","then","response","file","Blob","data","type","fileURL","URL","createObjectURL","open","catch","error","showValidationMessage","allowOutsideClick","isLoading","showLoaderOnConfirm","canvasHeight","canvasWidth","foregroundColor","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70d243dc.chunk.js","sourcesContent":["// exports.serverURL = \"http://localhost:5000\";\nexports.serverURL = \"https://recognotes.herokuapp.com\";\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { serverURL } from \"../utils/serverInfo\";\n\nimport Swal from \"sweetalert2\";\n\nimport AudioReactRecorder, { RecordState } from \"audio-react-recorder\";\n\nimport { Typography, IconButton } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport StopIcon from \"@material-ui/icons/Stop\";\n\nimport \"./AudioRecorder.css\";\n\nconst useStyles = makeStyles({\n  formButton: {\n    position: \"absolute\",\n    margin: \"auto\",\n    left: 0,\n    right: 0,\n    backgroundColor: \"white\",\n    color: \"black\",\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n      color: \"white\",\n    },\n  },\n  recordButtonIcon: {\n    fontSize: 80,\n    padding: 10,\n  },\n  whiteColored: {\n    color: \"white\",\n    textAlign: \"center\",\n  },\n});\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\nfunction AudioRecorder(props) {\n  const classes = useStyles();\n\n  const { width } = useWindowDimensions();\n\n  const [recordState, setRecordState] = useState(null);\n\n  const [isRecording, setIsRecording] = useState(false);\n\n  const [sampleRate, setSampleRate] = useState(44100);\n  const [bpm, setBpm] = useState(120);\n\n  const startRecording = () => {\n    setRecordState(RecordState.START);\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setRecordState(RecordState.STOP);\n    setIsRecording(false);\n  };\n\n  const saveRecording = (audioData) => {\n    //audioData contains blob and blobUrl\n    setSampleRate(44100);\n    setBpm(120);\n\n    Swal.fire({\n      // Swal properties\n      icon: \"success\",\n      title: '<span style=\"color: white\">Recording Saved!</span>',\n      text:\n        \"Please Enter the Title for the Output Audio Sheets...\\n You can press cancel and record again\",\n      input: \"text\",\n      inputPlaceholder: \"Enter Your Title Here\",\n      showCancelButton: true,\n\n      // input validator\n      inputValidator: (value) => {\n        if (!value) {\n          return \"Title cannot be empty!\";\n        }\n      },\n\n      // styles\n      confirmButtonColor: \"white\",\n      confirmButtonText: '<span style=\"color: #191919\">Submit</span>',\n      cancelButtonColor: \"white\",\n      cancelButtonText: '<span style=\"color: #191919\">Cancel</span>',\n      customClass: \"swal-confirm\",\n\n      // onSubmit\n      preConfirm: (title) => {\n        // first of all, create the wav file from the blob\n        const fileName = Math.random().toString(36).substring(6) + \"_name.wav\"; // random\n        const wavFile = new File([audioData.blob], fileName);\n\n        // creating form data to contain file\n        const formData = new FormData();\n\n        // attach wav file to form data\n        formData.append(\"file\", wavFile);\n\n        // strings are easier to send and recieve via form data\n        const fileDataString = `{\n          \"sample_rate\": ${sampleRate},\n          \"bpm\": ${bpm},\n          \"sheets_title\": \"${title}\"\n        }`;\n\n        formData.append(\"file_data\", fileDataString);\n\n        return axios\n          .post(`${serverURL}/proccess_audio`, formData, {\n            responseType: \"blob\",\n          })\n          .then((response) => {\n            // save response as PDF blob\n            const file = new Blob([response.data], { type: \"application/pdf\" });\n            //Build a URL from the file\n            const fileURL = URL.createObjectURL(file);\n            //Open the URL on new Window\n            window.open(fileURL);\n          })\n          .catch((error) => {\n            Swal.showValidationMessage(`Request failed: ${error}`);\n          });\n      },\n      allowOutsideClick: () => !Swal.isLoading(),\n      showLoaderOnConfirm: true,\n    });\n  };\n\n  return (\n    <div>\n      <Typography variant=\"h2\" className={classes.whiteColored}>\n        RecogNotes\n      </Typography>\n      <Typography variant=\"h6\" className={classes.whiteColored}>\n        Press\n        <MicIcon style={{ fontSize: 20 }} />\n        to Start Recording\n      </Typography>\n\n      <div style={{ height: \"15vh\" }}>\n        <br />\n      </div>\n\n      {isRecording ? (\n        <IconButton onClick={stopRecording} className={classes.formButton}>\n          <StopIcon className={classes.recordButtonIcon} />\n        </IconButton>\n      ) : (\n        <IconButton onClick={startRecording} className={classes.formButton}>\n          <MicIcon className={classes.recordButtonIcon} />\n        </IconButton>\n      )}\n\n      <div style={{ height: \"25vh\" }}>\n        <br />\n      </div>\n\n      <AudioReactRecorder\n        state={recordState}\n        onStop={saveRecording}\n        canvasHeight={150}\n        canvasWidth={width}\n        foregroundColor=\"white\"\n        backgroundColor=\"#191919\"\n      />\n    </div>\n  );\n}\n\nexport default AudioRecorder;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport AudioRecorder from \"./components/AudioRecorderComponent\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={AudioRecorder} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}